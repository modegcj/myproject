node模块：
引入模块 var 变量名 = require('模块名');
1.http模块：
    http.createServer(function(req,res){
        res.writeHead(200,{'Content-Type':'text/plain'});
        res.end('Hello World');
    })（创建服务器）.listen(8080,127.0.0.1)（监听端口）

2.fs模块
    打开文件
    fs.open(path,flags[,mode],callback)
    • path  文件路径
    • flags 要打开的文件的行为
    • mode  设置文件模式，前提是在创建改文件，默认为0666，读取和写入
    • callback  回调函数得到两个参数(err,fd)
    flags >
        r   打开文件进行读取
        r+  打开文件进行读取和写入
        rs  打开文件，用于读取在同步方式
        rs+ 打开文件进行写入
        w   打开文件进行写入，文件不存在则创建，文件存在则截断
        wx  类似'w'，路径存在则失败
        w+  打开文件进行读取和写入，文件不存在则创建，文件存在则截断
        wx+ 类似'w+'，路径存在则失败
        a   打开文件进行追加，文件不存在则创建
        ax  类似'a'，路径存在则失败
        a+  打开文件进行读取和追加，文件不存在则创建
        ax+ 类似'a+'，路径存在则失败
    读取文件
    fs.readFile("路径",function(err,data){})
    fs.read(fd,buffer,offset,length,position,callback)
    • fd    这是通过文件fs.open()方法返回的文件描述符
    • buffer    这是该数据将被写入到缓冲器
    • offset    这是偏移量在缓冲器开始写入出
    • length    指定要读取的字节的数目
    • position  整数，指定从文件中开始读取，如果位置为null，数据将从当前文件位置读取
    • callback  回调函数
    获取一个文件有关的信息的方法
    fs.stat(path,callback)
    写入文件
    fs.writeFile(path,data[,options],callback)
    • path  文件名
    • data  将被写入到文件中的字符串或缓存
    • options   一个对象，它将于{编码,模式,标志}。默认编码是UTF8，模式是八进制066和标志'w'
    • callback  回调函数
    关闭文件
    fs.close(fd,callback)
    截断文件
    fs.ftruncate(fd,len,callback)
    删除文件
    fs.unlink(path,callback)
    创建目录
    fs.mkdir(path[,mode],callback)
    读取目录
    fs.readdir(path,callback)
    删除目录
    fs.rmdir(path,callback)

3.event模块
    var eventEmitter = new events.eventEmitter();

    eventEmitter的方法总结：
    绑定事件
    eventEmitter.on('事件名',事件处理函数);
    触发事件
    eventEmitter.emit('事件名');
    添加一个监听器
    eventEmitter.addListener('事件名',事件处理函数)
    增加一次监听事件
    eventEmitter.once('事件名',事件处理函数)
    删除监听器
    eventEmitter.removeListener('事件名',事件处理函数)
    删除所有监听器
    eventEmitter.removeAllListeners([事件名])
    返回监听器为指定事件的数组
    eventEmitter.listeners(事件名)

    eventEmitter的类方法：
    返回对于一个给定的事件监听器的数量
    eventEmitter.listenerCount(发射器,事件名)

4.缓冲器
    Buffer代表一个缓冲区，主要用于操作二进制数据流，用法和数组有些相似
    var buf = new Buffer(size/array/(str,[encoding])/buffer)
    Buffer对象的方法：
    buf.write(string[,offset][,length][,encoding])  //往Buffer对象中写入数据
    buf.write用来向缓冲区中写入一个字符串，返回实际写入的字节数
    • string 待写入的字符串对象
    • offset 缓冲区偏移量，指定的话就从这个位置开始写入，不指定就默认为0
    • length 要写入的字节数
    • encoding 待写入字符串的编码格式，默认为utf8
    buf.toString([encoding][,start][,end])  //根据encoding参数(默认是'utf8')返回一个解码的string类型
    buf.toJSON()    //返回一个JSON表示的Buffer实例。JSON.stringify将会默认调用来字符串序列化这个Buffer实例
    buf.slice([start][,end])    //返回一个新的buffer，这个buffer将会和老的buffer引用相同的内存地址，改变原来的buffer
    buf.copy(targetBuffer[,targetStart][,sourceStart][,shourceEnd]) //进行buffer的拷贝
    buf.concat(list[,totalLength])  //连接Node缓存到单个节点缓存，返回一个缓冲区实例
    • list 要连接缓冲区的数组对象列表
    • totalLength 这是缓冲器连接在一起时的总长度
    buf.compare(otherBuffer)    //比较两个Node缓冲器，返回一个数字，表示否到来之前或之后或和otherBuffer排序顺序一样
    buf.fill(value[,offset][,end])  //填充指定值的缓冲区，如果只有一个参数则它填满整个缓冲区

5.Node.js流
流是可以从一个源读取或写入数据到连续的目标对象。在Node.js中有四种类型的数据流
    • Readable  用于读操作
    • Writable  用于写操作
    • Duplex    用于读取和写入操作
    • Transform 输出基于输入的地方进行计算的一种双向流
每种类型的流是一个EventEmitter实例，并抛出的时代不同的实例几个事件，一些常用的事件是：
    • data  当有数据可读取此事件
    • end   当没有更多的数据读取此事件被触发
    • error 当有任何错误或接受数据写入此事件
    • finish    当所有数据已刷新到底层系统触发此事件

6.Node.js的全局对象
__firename：表示正在执行的代码的文件名
__dirname：表示当前正在执行的脚本所在目录的名称
setTimeout(callback,ms)定时器
clearTimeout()清除定时器
setInterval(callback,ms)计时器
clearInterval()清除计时器

7.Node.js工具模块
OS Module   提供基本的操作系统相关的实用功能
Path Module 提供工具，用于处理和转换文件的路径
Net Module  提供服务器和客户端的数据流，充当网络包装
DNS Module  提供做实际DNS查询的功能，以及使用底层操作系统的名词解析功能
Domain Module   提供一个方式来处理多个不同的I/O操作，作为一个组


8.Node.js规范化应用
Node提供child_process模块，该模块具有以下三个主要的方法来创建子进程
    • exec  -child_process.exec方法在shell控制台运行一个命令并缓冲输出
    • apawn -child_process.spawn启动一个新的进程，一个给定的指令
    • fork  -child_process.fork方法是指定spawn()来创建子进程的一个特例
exec()方法在shell运行一个命令并缓冲输出
child_process.exec(command[,options],callback)
    • command   字符串运行的命令
    • options   对象可包括以下一个或多个选项
        • cwd   子进程的字符串当前工作目录
        • env   对象环境的键值对
        • encoding  字符串(缺省："UTF8")
        • shell 字符串执行
        • timeout   数字(默认：0)
        • maxBuffer 数字(默认:200*1024)
        • killSignal    字符串(默认：'SIGTERM')
        • uid   数字用于设置过程的用户的身份
        • gid   数字设置进程的组标识
    • callback  回调函数
spawn()方法启动使用给定命令一个新的进程
child_process.spawn(command[,args][,options])
    • args  字符串参数数组列表
fork()方法是spawn()来创建节点的过程的一个特例
child_process.fork(modulePath[,args][,options])
    • modulePath    字符串-改模块在运行子进程
